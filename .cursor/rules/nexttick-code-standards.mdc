---
description: NextTick Flutter habit tracking app - comprehensive code generation standards enforcing quality, accessibility, and brand consistency
globs:
alwaysApply: true
---

NEXTTICK FLUTTER APP - MANDATORY CODE STANDARDS

PROJECT CONTEXT:
NextTick is a cross-platform Flutter habit tracking app with GitHub integration, focusing on Material Design 3, accessibility, and production-quality code.

CRITICAL CODE QUALITY RULES (ALWAYS ENFORCE):

1. CONST CONSTRUCTORS
   - Use const constructors everywhere possible
   - If a widget can be const, make it const
   - Apply to all StatelessWidgets and immutable objects

2. CODE FORMATTING
   - ALWAYS add trailing commas to multi-line parameter lists
   - ALWAYS use single quotes for strings (never double quotes)
   - Keep lines under 80 characters
   - Use 2-space indentation

3. NEXTTICK DESIGN SYSTEM
   - Primary Color: #6366F1 (Modern Indigo)
   - Success Color: #10B981 (Emerald Green)  
   - Warning Color: #F59E0B (Amber)
   - Error Color: #EF4444 (Red)
   - Background: #F8FAFC (Slate 50)
   - Surface: #FFFFFF (White)
   - Text Primary: #1E293B (Slate 800)
   - Text Secondary: #64748B (Slate 500)

4. ACCESSIBILITY (MANDATORY)
   - Add Semantics widgets to all interactive elements
   - Use semantic labels: Semantics(label: 'Complete habit', child: ...)
   - Ensure 44px minimum touch targets
   - Support screen readers with proper markup

5. PERFORMANCE & BEST PRACTICES
   - Use SizedBox instead of Container for spacing
   - Extract widgets when build methods exceed 50 lines
   - Use ListView.builder for lists with >10 items
   - Implement proper dispose methods for controllers
   - Use meaningful variable names (no abbreviations like 'btn', 'txt')

6. ERROR HANDLING PATTERN
   ```dart
   try {
     final result = await repository.saveHabit(habit);
     return Right(result);
   } on DatabaseException catch (e) {
     return Left(DatabaseFailure(e.message));
   } catch (e) {
     return Left(UnknownFailure(e.toString()));
   }
   ```

7. STATE MANAGEMENT
   - Use Provider for state management
   - Create separate providers for different features
   - Use Consumer/Selector for targeted rebuilds
   - Implement proper dispose methods

8. WIDGET STRUCTURE TEMPLATE
   ```dart
   class HabitCard extends StatelessWidget {
     const HabitCard({
       super.key,
       required this.habit,
       required this.onComplete,
       this.showStreak = true,
     });

     final Habit habit;
     final VoidCallback onComplete;
     final bool showStreak;

     @override
     Widget build(BuildContext context) {
       return Semantics(
         label: 'Habit: ${habit.title}',
         child: Card(
           margin: const EdgeInsets.all(8),
           child: _buildContent(context),
         ),
       );
     }

     Widget _buildContent(BuildContext context) {
       // Implementation with const usage
     }
   }
   ```

9. DATABASE MODELS PATTERN
   ```dart
   class Habit {
     const Habit({
       required this.id,
       required this.title,
       required this.frequency,
       required this.createdAt,
       this.isActive = true,
     });

     final String id;
     final String title;
     final String frequency;
     final DateTime createdAt;
     final bool isActive;

     Map<String, dynamic> toMap() {
       return {
         'id': id,
         'title': title,
         'frequency': frequency,
         'created_at': createdAt.toIso8601String(),
         'is_active': isActive ? 1 : 0,
       };
     }

     factory Habit.fromMap(Map<String, dynamic> map) {
       return Habit(
         id: map['id'] as String,
         title: map['title'] as String,
         frequency: map['frequency'] as String,
         createdAt: DateTime.parse(map['created_at'] as String),
         isActive: (map['is_active'] as int) == 1,
       );
     }
   }
   ```

10. HABIT TRACKING SPECIFIC FEATURES
    - XP System: 10 XP per habit completion, streak bonuses
    - Streak tracking with fire emoji (ðŸ”¥) visualization
    - Level progression (100 XP per level)
    - Daily completion percentage tracking
    - Celebration animations for completions

11. MATERIAL DESIGN 3 COMPONENTS
    - Use Material 3 Cards, FABs, Chips
    - Implement proper elevation and shadows
    - Use 8dp grid system for spacing
    - Add smooth transitions and micro-animations

12. IMPORT ORGANIZATION
    ```dart
    // Order: dart, flutter, package, relative
    import 'dart:async';

    import 'package:flutter/material.dart';

    import 'package:provider/provider.dart';
    import 'package:sqflite/sqflite.dart';

    import '../core/constants/app_constants.dart';
    import 'habit_model.dart';
    ```

13. NAMING CONVENTIONS
    - Files: snake_case (habit_card.dart)
    - Classes: PascalCase (HabitCard)
    - Variables: camelCase (habitRepository)
    - Constants: SCREAMING_SNAKE_CASE (HABIT_CREATED)
    - Functions: camelCase (calculateStreak)
    - Private members: _prefixWithUnderscore

14. WIDGET LIFECYCLE & DISPOSAL
    - Always implement dispose() for StatefulWidgets with controllers
    - Cancel subscriptions and timers in dispose()
    - Close streams and animation controllers properly
    - Use late keyword for non-nullable fields initialized in initState
    - Implement proper resource cleanup patterns

15. CALENDAR INTEGRATION REQUIREMENTS
    - Use table_calendar package for calendar views
    - Implement date-aware habit scheduling (daily, weekly, custom)
    - Add visual indicators for habits/tasks on calendar dates
    - Support task due dates with calendar selection
    - Create calendar heat map for streak visualization
    - Use DateTime and Date types properly for calendar queries
    - Handle timezone considerations for accurate date tracking

16. TESTING REQUIREMENTS
    - Write unit tests for all business logic
    - Use AAA pattern (Arrange, Act, Assert)
    - Mock external dependencies with mocktail
    - Test error handling paths
    - Maintain 80%+ code coverage for core features

17. DOCUMENTATION STANDARDS
    - Add /// documentation for all public APIs
    - Include usage examples in complex functions
    - Document expected behavior and edge cases
    - Use meaningful commit messages following conventional commits
    - Update README for setup instructions

18. SECURITY & VALIDATION
    - Validate all user inputs before processing
    - Sanitize data before database operations
    - Use secure storage for sensitive data
    - Implement proper null safety throughout
    - Handle network timeouts and failures gracefully


NEXTTICK APP STRUCTURE:
lib/
â”œâ”€â”€ core/ (constants, themes, utils)
â”œâ”€â”€ features/ (habits, tasks, progress, settings)
â”œâ”€â”€ shared/ (widgets, services, database)
â””â”€â”€ main.dart

These standards are MANDATORY for ALL code generation. Follow the comprehensive .cursorrules file patterns exactly. Focus on creating production-quality, accessible, and maintainable Flutter code that aligns with NextTick's vision of building positive momentum through small daily actions.